<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>frank_in_seattle</title>
    <link>https://frank2016ma.github.io/seattle/</link>
    <description>Recent content on frank_in_seattle</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sat, 15 Apr 2023 00:00:00 +0000</lastBuildDate><atom:link href="https://frank2016ma.github.io/seattle/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>About-RPA</title>
      <link>https://frank2016ma.github.io/seattle/posts/about-rpa/</link>
      <pubDate>Sat, 15 Apr 2023 00:00:00 +0000</pubDate>
      
      <guid>https://frank2016ma.github.io/seattle/posts/about-rpa/</guid>
      <description>1. 给出RPA工具的三个优点  提高工作效率：RPA可以自动化重复性、繁琐的任务，从而节省时间和人力，提高工作效率。 减少错误率：RPA可以避免人为错误，从而减少错误率，提高数据准确性和可靠性。(并非指不会报错) 降低成本：RPA可以代替人力完成部分工作，从而降低成本，同时还能提高生产效率。  2. 实施RPA流程有哪几个步骤？  业务流程分析：首先需要对需要自动化的业务流程进行详细的分析，确定自动化的可行性和优先级。 流程设计：根据业务流程分析的结果，设计自动化流程，包括流程图设计、自动化脚本编写、数据处理等。 机器人部署：选择合适的机器人工具，并进行部署和配置，包括安装机器人软件、配置机器人环境、设置机器人权限等。 测试和验证：进行自动化流程的测试和验证，包括验证流程的正确性、数据的准确性和完整性等。 上线和运维：将自动化流程上线，并进行监控和维护，包括定期检查机器人运行状态、处理异常情况、更新自动化脚本等。 持续优化：根据实际运行情况，对自动化流程进行持续优化，包括优化自动化脚本、增加自动化流程等，以提高效率和准确性。 以上步骤可以根据实际情况进行调整和修改，但总体流程应该是类似的。  3. 使用RPA有什么好处？  提高工作效率：RPA可以自动化重复性、繁琐的任务，从而节省时间和人力，提高工作效率。 减少错误率：RPA可以避免人为错误，从而减少错误率，提高数据准确性和可靠性。 降低成本：RPA可以代替人力完成部分工作，从而降低成本，同时还能提高生产效率。 提高员工满意度：RPA可以解放员工手动操作的重复性工作，使他们可以更专注于高价值的工作，从而提高员工满意度和工作积极性。 提高业务灵活性：RPA可以快速适应不同的业务需求和变化，从而提高业务灵活性和响应速度。 提高数据安全性：RPA可以通过权限控制和审计功能来保证数据的安全性，从而降低数据泄露和安全风险。  4. RPA和宏之间的主要区别是什么？   目的不同：RPA是为了实现自动化流程，减少人工干预，提高效率和准确性，而宏则是为了简化重复性操作，提高用户体验。
  实现方式不同：RPA是通过机器人自动执行流程，而宏是通过对软件进行编程来实现自动化操作。
  灵活性不同：RPA可以自动化各种软件和系统，包括ERP、CRM、OA等，而宏通常只能应用于特定软件或应用程序。
  编写难度不同：RPA的自动化脚本可以通过拖放式流程设计来完成，而宏需要进行编程，需要具备一定的编程知识和技能。
  安全性不同：RPA可以通过权限控制和审计功能来保证数据的安全性，而宏则可能存在安全风险，如恶意宏可能会破坏系统或窃取数据。
总之，RPA和宏都可以实现自动化操作，但目的、实现方式、灵活性、编写难度和安全性等方面存在较大的区别。
  5. 传统软件系统和RPA之间有什么区别  目的不同：传统软件系统通常是为了解决特定的业务需求而开发的，而RPA则是为了自动化重复性、繁琐的任务而开发的。 开发难度不同：传统软件系统通常需要进行复杂的开发过程，需要考虑各种业务逻辑和数据处理，而RPA则相对简单，只需要进行简单的流程设计和自动化脚本编写。 执行速度不同：传统软件系统通常需要进行复杂的计算和处理，执行速度较慢，而RPA则是基于机器人的自动化，执行速度较快。 可扩展性不同：传统软件系统通常需要进行复杂的扩展和升级，而RPA则可以通过添加新的自动化脚本来实现快速扩展。 适用范围不同：传统软件系统通常适用于各种复杂的业务场景，而RPA则更适用于重复性、繁琐的任务，如数据输入、数据处理、文件传输等。  </description>
    </item>
    
    <item>
      <title>Gpt_mirror</title>
      <link>https://frank2016ma.github.io/seattle/posts/gpt_mirror/</link>
      <pubDate>Sun, 09 Apr 2023 20:27:59 +0800</pubDate>
      
      <guid>https://frank2016ma.github.io/seattle/posts/gpt_mirror/</guid>
      <description>Gpt-mirror</description>
    </item>
    
    <item>
      <title>Everything Search Tool</title>
      <link>https://frank2016ma.github.io/seattle/posts/everything-search-tool/</link>
      <pubDate>Mon, 03 Apr 2023 22:28:49 +0800</pubDate>
      
      <guid>https://frank2016ma.github.io/seattle/posts/everything-search-tool/</guid>
      <description>&amp;ldquo;Everything&amp;rdquo; 是什么？ &amp;ldquo;Everything&amp;rdquo; 是 Windows 上一款搜索引擎，它能够基于文件名快速定文件和文件夹位置。
如何在运行 &amp;ldquo;Everything&amp;rdquo; 时屏蔽 UAC 警告？ &amp;ldquo;Everything&amp;rdquo; 需要管理员权限以便低级别读取 NTFS 分卷来 NTFS 索引。
UAC 警告可以通过以标准用户运行 &amp;ldquo;Everything&amp;rdquo; 和安装 &amp;ldquo;Everything&amp;rdquo; 服务或不使用 NTFS 索引来避免。
以标准用户运行 &amp;ldquo;Everything&amp;rdquo; 和安装 &amp;ldquo;Everything&amp;rdquo; 服务：
在 &amp;ldquo;Everything&amp;rdquo; 中，打开工具菜单，点击选项。
  点击常规页面。
  检查 Everything 服务。
  取消以管理员方式运行。
  点击确定。
  退出 &amp;ldquo;Everything&amp;rdquo; (右键 Everything 托盘图标并点击退出)。
  重启 Everything。
  搜索 &amp;ldquo;Everything&amp;rdquo; 能否搜索文件内容？ 可以，&amp;ldquo;Everything&amp;rdquo; 可以通过搜索函数 content: 来搜索文件内容。
文件内容未被索引时，搜索内容将会很慢。
如何使用通配符？ 搜索关键词中使用通配符 * 将会匹配任意数量的任意字符。</description>
    </item>
    
    <item>
      <title>PowerShell History</title>
      <link>https://frank2016ma.github.io/seattle/posts/powershell-history/</link>
      <pubDate>Sun, 02 Apr 2023 11:42:36 +0800</pubDate>
      
      <guid>https://frank2016ma.github.io/seattle/posts/powershell-history/</guid>
      <description>Get-History PowerShell 的 Get-History 命令只显示当前会话的历史命令
PowerShell 没有类似 Linux bash 下的 history 一样, 直接查看所有会话的历史命令的 Cmdlet
但是和 bash 一样, PowerShell 将所有会话的命令历史记录存储在文本文件中
这个文件的路径可以通过命令 (Get-PSReadlineOption).HistorySavePath 获取到
Get-PSReadlineOption Get-PSReadlineOption 命令 包含在 PSReadLine 模块下, 该模块需要 PowerShell 5.1 或更高的版本
可以通过以下命令来实现查看所有命令历史记录
Get-Content (Get-PSReadlineOption).HistorySavePath 需要注意的是, 如果历史命令中包含中文等非ASCII字符, 需要使用对应的编码读取该文本文件, 否则会显示乱码
PowerShell 5.1 中 Get-Content 命令的 -Encoding 参数默认是 Default
Default 使用与系统的活动代码页相对应的编码 (通常为 ANSI)
而在 PowerShell 7.2 中, Get-Content 命令的 -Encoding 参数默认是 utf8NoBOM
utf8NoBOM：以 UTF-8 格式编码，不带字节顺序标记 (BOM)</description>
    </item>
    
    <item>
      <title>Bookmarklet</title>
      <link>https://frank2016ma.github.io/seattle/posts/bookmarklet/</link>
      <pubDate>Mon, 27 Mar 2023 17:21:51 +0800</pubDate>
      
      <guid>https://frank2016ma.github.io/seattle/posts/bookmarklet/</guid>
      <description>Bookmarklet 是什么 A bookmarklet is a bookmark stored in a web browser that contains JavaScript commands that add new features to the browser. They are stored as the URL of a bookmark in a web browser or as a hyperlink on a web page. Bookmarklets are usually small snippets of JavaScript executed when user clicks on them. When clicked, bookmarklets can perform a wide variety of operations, such as running a search query from selected text or extracting data from a table.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://frank2016ma.github.io/seattle/about/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://frank2016ma.github.io/seattle/about/</guid>
      <description></description>
    </item>
    
    
    <item>
      <title>Hugo Content Management</title>
      <link>https://frank2016ma.github.io/seattle/posts/hugo-content-management/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://frank2016ma.github.io/seattle/posts/hugo-content-management/</guid>
      <description>名词 Page resources – images, other pages, documents, etc. – have page-relative URLs and their own metadata.
Page Bundles are a way to group Page Resources.
Page Bundle definition A Page Bundle can be one of:
 Leaf Bundle(leaf means it has no children) Branch Bundle(home page, section, taxonomy terms, taxonomy list)  examples content/ ├── about(Leaf Bundle) │ ├── index.md ├── posts │ ├── my-post(Leaf Bundle) │ │ ├── content1.</description>
    </item>
    
    <item>
      <title>Microsoft Excel Scroll</title>
      <link>https://frank2016ma.github.io/seattle/posts/microsoft-excel-scroll/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://frank2016ma.github.io/seattle/posts/microsoft-excel-scroll/</guid>
      <description>浏览器以及 WPS Office 支持 Shift+ 鼠标滚轮 实现横向滚动
Microsoft Office 的 Excel 横向滚动的方式是 Ctrl+ Shift+ 鼠标滚轮</description>
    </item>
    
    <item>
      <title>MIME</title>
      <link>https://frank2016ma.github.io/seattle/posts/mime/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://frank2016ma.github.io/seattle/posts/mime/</guid>
      <description>MIME 类型 MIME (Multipurpose Internet Mail Extensions) 是描述消息内容类型的标准，用来表示文档、文件或字节流的性质和格式。
MIME 消息能包含文本、图像、音频、视频以及其他应用程序专用的数据。
浏览器通常使用 MIME 类型（而不是文件扩展名）来确定如何处理URL，因此 We b服务器在响应头中添加正确的 MIME 类型非常重要。如果配置不正确，浏览器可能会无法解析文件内容，网站将无法正常工作，并且下载的文件也会被错误处理。
语法 MIME 类型通用结构：
 type/subtype
 MIME 的组成结构非常简单，由类型与子类型两个字符串中间用 / 分隔而组成，不允许有空格。type 表示可以被分多个子类的独立类别，subtype 表示细分后的每个类型。
MIME类型对大小写不敏感，但是传统写法都是小写。
两种主要的 MIME 类型在默认类型中扮演了重要的角色：
 text/plain 表示文本文件的默认值。 application/octet-stream 表示所有其他情况的默认值。  摘自 MIME 类型 | 菜鸟教程</description>
    </item>
    
    <item>
      <title>PowerShell Profile</title>
      <link>https://frank2016ma.github.io/seattle/posts/powershell-profile/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://frank2016ma.github.io/seattle/posts/powershell-profile/</guid>
      <description>简短说明 介绍如何创建和使用 PowerShell 配置文件
长说明 PowerShell 配置文件是在 PowerShell 启动时运行的脚本。 可以使用配置文件作为启动脚本来自定义环境。 可以添加命令、别名、函数、变量、模块、PowerShell 驱动器等。 还可以将其他特定于会话的元素添加到配置文件中，使其在每个会话中可用，而无需导入或重新创建它们。 PowerShell 支持用户和主机程序的多个配置文件。 但是，它不会为你创建配置文件。
$PROFILE 变量 变量 $PROFILE 存储 当前用户，当前主机 配置文件 的路径。
其他配置文件保存在 变量的注释属性中, 可通过以下命令查看对应类型配置文件的路径
$PROFILE | Get-Member -Type NoteProperty 创建、编辑配置文件 notepad $PROFILE 如果配置文件首次设置后, 打开 PowerShell 时显示
无法加载文件 C:\Users\Ma\Documents\WindowsPowerShell\Microsoft.PowerShell_profile.ps1，因为在此系统上禁止运行脚本。
需要以管理员身份运行以下脚本, 修改执行策略以允许加载配置文件
Set-ExecutionPolicy RemoteSigned 使用配置文件 在 PowerShell 中创建的许多项和运行的大多数命令仅影响当前会话。 结束会话时，将删除这些项。
特定于会话的命令和项包括添加到会话的 PowerShell 变量、环境变量、别名、函数、命令和 PowerShell 模块。
若要保存这些项并使其在所有将来的会话中可用，请将它们添加到 PowerShell 配置文件。
配置文件的另一个常见用途是保存常用函数、别名和变量。 将项目保存在配置文件中时，可以在任何适用的会话中使用它们，而无需重新创建它们。
导入第三方库 Terminal-Icons 美化终端
Import-Module Terminal-Icons 保存常用函数, 如 将 history 设置为查看所有历史命令, 而非仅仅当前会话的历史命令</description>
    </item>
    
    <item>
      <title>Powershell Remove Duplicate Files</title>
      <link>https://frank2016ma.github.io/seattle/posts/powershell-remove-duplicate-files/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://frank2016ma.github.io/seattle/posts/powershell-remove-duplicate-files/</guid>
      <description>PowerShell 脚本 删除重复文件(根据文件哈希值判重)
$root_path = &amp;#34;D:\folder_name&amp;#34; $log_file = &amp;#34;D:\log_file.txt&amp;#34; ls $root_path -recurse | get-filehash | group -property hash | where { $_.count -gt 1 } | % { $_.group } | epcsv $log_file </description>
    </item>
    
    <item>
      <title>vscode key shortcuts</title>
      <link>https://frank2016ma.github.io/seattle/posts/vscode-keys/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://frank2016ma.github.io/seattle/posts/vscode-keys/</guid>
      <description>   多光标操作 ====     Ctrl+I 选中当前行   Shift+Alt+I 将光标插入所选每行的末尾   Ctrl+Shift+L 选择所有与所选中内容相同的内容   Ctrl+F2 选择所有与所选中词汇相同的内容       编辑器控制 ====     Ctrl+\ 拆分编辑器为多组   Ctrl+ 1 / 2 / 3 切换窗口焦点至某一组       文件管理 ====     Ctrl+K P 复制当前文件路径   Ctrl+K R 打开当前文件所在文件夹       显示 ====     Shift+Alt+0 切换编辑器布局（水平/垂直）   Ctrl+Shift+F 显示搜索界面   Ctrl+Shift+X 显示插件管理界面   Ctrl+K V 预览Markdown文件（侧边）   Ctrl+K Z 禅模式（连按两次Esc退出）       语言操作 ====     Ctrl+K Ctrl+X 移除行尾空白字符       基础编辑 ====     Ctrl+Shift+K 删除行   Ctrl+Enter 在当前行下方插入新行   Ctrl+Shift+Enter 在当前行上方插入新行   Shift+Alt+A 切换块注释   Alt+Z 切换自动换行   Ctrl+K Ctrl+[ 折叠当前所有子代码块   Ctrl+K Ctrl+] 展开当前所有子代码块    </description>
    </item>
    
    <item>
      <title>Win11 Brightness</title>
      <link>https://frank2016ma.github.io/seattle/posts/win11-brightness/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://frank2016ma.github.io/seattle/posts/win11-brightness/</guid>
      <description>Windows11 系统的笔记本电脑在使用电源时, 会出现偶尔屏幕变暗又恢复的情况
解决方法:
打开 设置 &amp;gt; 系统 &amp;gt; 屏幕, 点击亮度调节 右侧下拉选项, 取消勾选 通过优化显示的内容和亮度降低电池能耗
  </description>
    </item>
    
  </channel>
</rss>
