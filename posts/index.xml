<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>Posts on Frank in seattle</title>
        <link>https://frank2016ma.github.io/seattle/posts/</link>
        <description>Recent content in Posts on Frank in seattle</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>en-us</language>
        <lastBuildDate>Thu, 25 May 2023 15:16:41 +0800</lastBuildDate><atom:link href="https://frank2016ma.github.io/seattle/posts/index.xml" rel="self" type="application/rss+xml" /><item>
        <title>TOML</title>
        <link>https://frank2016ma.github.io/seattle/posts/toml/</link>
        <pubDate>Thu, 25 May 2023 15:16:41 +0800</pubDate>
        
        <guid>https://frank2016ma.github.io/seattle/posts/toml/</guid>
        <description>规格  TOML 是大小写敏感的 TOML 文件必须是合法的 UTF-8 编码的 Unicode 文档 空白是指制表符(0x09)或空格(0x20) 换行是指 LF(0x0A)或 CRLF(0x0D 0x0A) 使用 # 符号作为注释  键值对 TOML 文档最基本的构成区块是键值对, 键名和键值周围的空白会被忽略
多次定义同一个key是非法的
key = &amp;#34;value&amp;#34; 点分隔符 name = &amp;#34;Orange&amp;#34; physical.color = &amp;#34;orange&amp;#34; physical.shape = &amp;#34;round&amp;#34; site.&amp;#34;google.com&amp;#34; = true # 引号内的点不会作为分隔符 等价于
{ &amp;#34;name&amp;#34;: &amp;#34;Orange&amp;#34;, &amp;#34;physical&amp;#34;: { &amp;#34;color&amp;#34;: &amp;#34;orange&amp;#34;, &amp;#34;shape&amp;#34;: &amp;#34;round&amp;#34; }, &amp;#34;site&amp;#34;: { &amp;#34;google.com&amp;#34;: true } } 表 表（也被称为哈希表或字典）是键值对的集合 它们由表头定义，连同方括号作为单独的行出现 表头不同于数组，因为数组只有值 缩进会被忽略
从表头下方, 直至下一个表头或者文件结束, 都是这个表的键值对
[table-1] key1 = &amp;#34;some string&amp;#34; key2 = 123 [table-2] key1 = &amp;#34;another string&amp;#34; key2 = 456 等价于</description>
        </item>
        <item>
        <title>Nginx 反向代理中的路径问题</title>
        <link>https://frank2016ma.github.io/seattle/posts/nginx-proxy-pass/</link>
        <pubDate>Wed, 24 May 2023 00:00:00 +0000</pubDate>
        
        <guid>https://frank2016ma.github.io/seattle/posts/nginx-proxy-pass/</guid>
        <description>Nginx 反向代理的配置块内容通常如下:
location [ = | ~ | ~* | ^~ ] uri { proxy_pass URL; } proxy_pass 后面的 URL, 如果带 /, 表示绝对路径, 如果不带 /, 表示相对路径
通常 URL = host[:port][path](中括号内的内容表示可选)
如 https://www.example.com:8080/,
https:// 是协议, www.example.com 是 host, 80 是 port, / 是 path
  proxy_pass 后面的 URL 不包含 path 时, 如 https://www.example.com:8080
target_url = URL + uri
  proxy_pass 后面的 URL 包含 path 时, /也算(如 https://www.example.com/)
target_url = URL.</description>
        </item>
        <item>
        <title>关于SSH长时间无操作自动断开</title>
        <link>https://frank2016ma.github.io/seattle/posts/ssh-timeout/</link>
        <pubDate>Fri, 19 May 2023 00:00:00 +0000</pubDate>
        
        <guid>https://frank2016ma.github.io/seattle/posts/ssh-timeout/</guid>
        <description>使用 ssh 客户端远程连接到服务器时, 默认情况下, 一段时间不操作, 没有向服务器发送指令, 就自动断开了连接, 需要重新登录
使用过的客户端中, xshell 默认情况下是会自动发送心跳来保持连接, 其他的一些如 mobaxterm, windterm, windows terminal自带的ssh, 时间久没有操作都是会断开连接的, 需要手动设置, 以下是手动设置的方法
 命令行参数设置  如果是在终端中使用ssh命令连接远程机器, 如在Windows Terminal中, 可以通过添加以下参数来设置每隔60秒向Server端发送一个空包以保持连接
ssh -o ServerAliveInterval=60 root@127.0.0.1 使用以上参数只会对本次连接会话有效, 如果需要每次都自动保持连接, 可以使用下面的方法
客户端.ssh/config文件设置  ~/.ssh/config 文件中添加ServerAliveInterval 60
Host xxx HostName 127.0.0.1 User root ServerAliveInterval 60 </description>
        </item>
        <item>
        <title>Win11 Brightness</title>
        <link>https://frank2016ma.github.io/seattle/posts/win11-brightness/</link>
        <pubDate>Wed, 12 Apr 2023 00:00:00 +0000</pubDate>
        
        <guid>https://frank2016ma.github.io/seattle/posts/win11-brightness/</guid>
        <description>Windows11 系统的笔记本电脑在使用电源时, 会出现偶尔屏幕变暗又恢复的情况
解决方法:
打开 设置 &amp;gt; 系统 &amp;gt; 屏幕, 点击亮度调节 右侧下拉选项, 取消勾选 通过优化显示的内容和亮度降低电池能耗
 </description>
        </item>
        <item>
        <title>Gpt_Mirror</title>
        <link>https://frank2016ma.github.io/seattle/posts/gpt_mirror/</link>
        <pubDate>Sun, 09 Apr 2023 20:27:59 +0800</pubDate>
        
        <guid>https://frank2016ma.github.io/seattle/posts/gpt_mirror/</guid>
        <description>Gpt-Mirror</description>
        </item>
        <item>
        <title>Everything Search Tool</title>
        <link>https://frank2016ma.github.io/seattle/posts/everything-search-tool/</link>
        <pubDate>Mon, 03 Apr 2023 22:28:49 +0800</pubDate>
        
        <guid>https://frank2016ma.github.io/seattle/posts/everything-search-tool/</guid>
        <description>&amp;ldquo;Everything&amp;rdquo; 是什么？ &amp;ldquo;Everything&amp;rdquo; 是 Windows 上一款搜索引擎，它能够基于文件名快速定文件和文件夹位置。
如何在运行 &amp;ldquo;Everything&amp;rdquo; 时屏蔽 UAC 警告？ &amp;ldquo;Everything&amp;rdquo; 需要管理员权限以便低级别读取 NTFS 分卷来 NTFS 索引。
UAC 警告可以通过以标准用户运行 &amp;ldquo;Everything&amp;rdquo; 和安装 &amp;ldquo;Everything&amp;rdquo; 服务或不使用 NTFS 索引来避免。
以标准用户运行 &amp;ldquo;Everything&amp;rdquo; 和安装 &amp;ldquo;Everything&amp;rdquo; 服务：
在 &amp;ldquo;Everything&amp;rdquo; 中，打开工具菜单，点击选项。
  点击常规页面。
  检查 Everything 服务。
  取消以管理员方式运行。
  点击确定。
  退出 &amp;ldquo;Everything&amp;rdquo; (右键 Everything 托盘图标并点击退出)。
  重启 Everything。
  搜索 &amp;ldquo;Everything&amp;rdquo; 能否搜索文件内容？ 可以，&amp;ldquo;Everything&amp;rdquo; 可以通过搜索函数 content: 来搜索文件内容。
文件内容未被索引时，搜索内容将会很慢。
如何使用通配符？ 搜索关键词中使用通配符 * 将会匹配任意数量的任意字符。</description>
        </item>
        <item>
        <title>PowerShell History</title>
        <link>https://frank2016ma.github.io/seattle/posts/powershell-history/</link>
        <pubDate>Sun, 02 Apr 2023 11:42:36 +0800</pubDate>
        
        <guid>https://frank2016ma.github.io/seattle/posts/powershell-history/</guid>
        <description>Get-History PowerShell 的 Get-History 命令只显示当前会话的历史命令
PowerShell 没有类似 Linux bash 下的 history 一样, 直接查看所有会话的历史命令的 Cmdlet
但是和 bash 一样, PowerShell 将所有会话的命令历史记录存储在文本文件中
这个文件的路径可以通过命令 (Get-PSReadlineOption).HistorySavePath 获取到
Get-PSReadlineOption Get-PSReadlineOption 命令 包含在 PSReadLine 模块下, 该模块需要 PowerShell 5.1 或更高的版本
可以通过以下命令来实现查看所有命令历史记录
Get-Content (Get-PSReadlineOption).HistorySavePath 需要注意的是, 如果历史命令中包含中文等非ASCII字符, 需要使用对应的编码读取该文本文件, 否则会显示乱码
PowerShell 5.1 中 Get-Content 命令的 -Encoding 参数默认是 Default
Default 使用与系统的活动代码页相对应的编码 (通常为 ANSI)
而在 PowerShell 7.2 中, Get-Content 命令的 -Encoding 参数默认是 utf8NoBOM
utf8NoBOM：以 UTF-8 格式编码，不带字节顺序标记 (BOM)</description>
        </item>
        <item>
        <title>Bookmarklet</title>
        <link>https://frank2016ma.github.io/seattle/posts/bookmarklet/</link>
        <pubDate>Mon, 27 Mar 2023 00:00:00 +0000</pubDate>
        
        <guid>https://frank2016ma.github.io/seattle/posts/bookmarklet/</guid>
        <description>Bookmarklet 是什么 A bookmarklet is a bookmark stored in a web browser that contains JavaScript commands that add new features to the browser. They are stored as the URL of a bookmark in a web browser or as a hyperlink on a web page. Bookmarklets are usually small snippets of JavaScript executed when user clicks on them. When clicked, bookmarklets can perform a wide variety of operations, such as running a search query from selected text or extracting data from a table.</description>
        </item>
        <item>
        <title>Download Github Single File</title>
        <link>https://frank2016ma.github.io/seattle/posts/download-github-single-file/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>https://frank2016ma.github.io/seattle/posts/download-github-single-file/</guid>
        <description>在命令行下, 如何在GitHub单独下载一份文件
# 下载到当前目录 wget https://raw.githubusercontent.com/&amp;lt;用户名&amp;gt;/&amp;lt;存储库名&amp;gt;/&amp;lt;分支名&amp;gt;/&amp;lt;文件路径&amp;gt;/&amp;lt;文件名&amp;gt; curl -O https://raw.githubusercontent.com/&amp;lt;用户名&amp;gt;/&amp;lt;存储库名&amp;gt;/&amp;lt;分支名&amp;gt;/&amp;lt;文件路径&amp;gt;/&amp;lt;文件名&amp;gt; # example wget https://raw.githubusercontent.com/curl/curl/master/README.md curl -O https://raw.githubusercontent.com/curl/curl/master/README.md # 下载到指定文件夹 $dest_folder = /root/ wget -P $dest_folder https://raw.githubusercontent.com/&amp;lt;用户名&amp;gt;/&amp;lt;存储库名&amp;gt;/&amp;lt;分支名&amp;gt;/&amp;lt;文件路径&amp;gt;/&amp;lt;文件名&amp;gt; curl -o $dest_folder https://raw.githubusercontent.com/&amp;lt;用户名&amp;gt;/&amp;lt;存储库名&amp;gt;/&amp;lt;分支名&amp;gt;/&amp;lt;文件路径&amp;gt;/&amp;lt;文件名&amp;gt; https://raw.githubusercontent.com/curl/curl/master/README.md
Windows PowerShell 中的 wget 和 curl, 并不是 Linux 平台下面的, 只是 Invoke-WebRequest 的别名</description>
        </item>
        <item>
        <title>Find Cheat Sheet</title>
        <link>https://frank2016ma.github.io/seattle/posts/find-cheat-sheet/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>https://frank2016ma.github.io/seattle/posts/find-cheat-sheet/</guid>
        <description>Usage find [path...] [options] [expression] # Wildcard find . -name &amp;#34;*.txt&amp;#34; find . -name &amp;#34;2020*.csv&amp;#34; find . -name &amp;#34;json_*&amp;#34; # regex # TODO # directory find . -type d # file find . -type f ## Size # Find all bigger than 10MB files, 查找大于10M的文件 find . -size +10M # Find all smaller than 10MB files, 查找小于10M的文件 find . -size -10M # Find Size between 100MB and 1GB, 查找大于100M且小于1G的文件 find .</description>
        </item>
        <item>
        <title>Grep Cheat Sheet</title>
        <link>https://frank2016ma.github.io/seattle/posts/grep-cheat-sheet/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>https://frank2016ma.github.io/seattle/posts/grep-cheat-sheet/</guid>
        <description># -i 忽略大小写 grep -i ^DA demo.txt # Search only for the full word, -w grep -w &amp;#34;of&amp;#34; demo.txt # Display 3 lines after matching string, -A grep -A 3 &amp;#39;Exception&amp;#39; error.log # Display 4 lines before matching string, -B grep -B 4 &amp;#39;Exception&amp;#39; error.log # Display 5 lines around matching string, -C grep -C 5 &amp;#39;Exception&amp;#39; error.log # Recursive search (within subdirs), -r grep -r &amp;#39;quickref.me&amp;#39; /var/log/nginx/ # -v 反向查找, 只打印不匹配的行 grep -v &amp;#39;warning&amp;#39; /var/log/syslog # Use regex (lines starting with &amp;#39;al&amp;#39;), -e grep -e &amp;#39;^al&amp;#39; filename # Extended regex (lines containing jason or jackson), -E grep -E &amp;#39;ja(s|cks)on&amp;#39; filename # -c 打印匹配的行数 grep -c &amp;#39;error&amp;#39; /var/log/syslog # -l 打印匹配的文件名 grep -l &amp;#39;robot&amp;#39; /var/log/* # Only show the matching part of the string, -o grep -o search_string filename # -n 显示匹配的行号 grep -n &amp;#34;go&amp;#34; demo.</description>
        </item>
        <item>
        <title>Hugo Content Management</title>
        <link>https://frank2016ma.github.io/seattle/posts/hugo-content-management/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>https://frank2016ma.github.io/seattle/posts/hugo-content-management/</guid>
        <description>名词 Page resources – images, other pages, documents, etc. – have page-relative URLs and their own metadata.
Page Bundles are a way to group Page Resources.
Page Bundle definition A Page Bundle can be one of:
 Leaf Bundle(leaf means it has no children) Branch Bundle(home page, section, taxonomy terms, taxonomy list)  examples content/ ├── about(Leaf Bundle) │ ├── index.md ├── posts │ ├── my-post(Leaf Bundle) │ │ ├── content1.</description>
        </item>
        <item>
        <title>Microsoft Excel Scroll</title>
        <link>https://frank2016ma.github.io/seattle/posts/microsoft-excel-scroll/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>https://frank2016ma.github.io/seattle/posts/microsoft-excel-scroll/</guid>
        <description>浏览器 WPS Office 及及大部分支持横向滚动的桌面端软件, 支持 Shift + 鼠标滚轮 实现横向滚动
Microsoft Office 的 Excel 横向滚动的方式是 Ctrl + Shift + 鼠标滚轮</description>
        </item>
        <item>
        <title>MIME</title>
        <link>https://frank2016ma.github.io/seattle/posts/mime/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>https://frank2016ma.github.io/seattle/posts/mime/</guid>
        <description>MIME 类型 MIME (Multipurpose Internet Mail Extensions) 是描述消息内容类型的标准，用来表示文档、文件或字节流的性质和格式。
MIME 消息能包含文本、图像、音频、视频以及其他应用程序专用的数据。
浏览器通常使用 MIME 类型（而不是文件扩展名）来确定如何处理URL，因此 We b服务器在响应头中添加正确的 MIME 类型非常重要。如果配置不正确，浏览器可能会无法解析文件内容，网站将无法正常工作，并且下载的文件也会被错误处理。
语法 MIME 类型通用结构：
 type/subtype
 MIME 的组成结构非常简单，由类型与子类型两个字符串中间用 / 分隔而组成，不允许有空格。type 表示可以被分多个子类的独立类别，subtype 表示细分后的每个类型。
MIME类型对大小写不敏感，但是传统写法都是小写。
两种主要的 MIME 类型在默认类型中扮演了重要的角色：
 text/plain 表示文本文件的默认值。 application/octet-stream 表示所有其他情况的默认值。  摘自 MIME 类型 | 菜鸟教程</description>
        </item>
        <item>
        <title>PowerShell Profile</title>
        <link>https://frank2016ma.github.io/seattle/posts/powershell-profile/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>https://frank2016ma.github.io/seattle/posts/powershell-profile/</guid>
        <description>简短说明 介绍如何创建和使用 PowerShell 配置文件
长说明 PowerShell 配置文件是在 PowerShell 启动时运行的脚本。 可以使用配置文件作为启动脚本来自定义环境。 可以添加命令、别名、函数、变量、模块、PowerShell 驱动器等。 还可以将其他特定于会话的元素添加到配置文件中，使其在每个会话中可用，而无需导入或重新创建它们。 PowerShell 支持用户和主机程序的多个配置文件。 但是，它不会为你创建配置文件。
$PROFILE 变量 变量 $PROFILE 存储 当前用户，当前主机 配置文件 的路径。
其他配置文件保存在 变量的注释属性中, 可通过以下命令查看对应类型配置文件的路径
$PROFILE | Get-Member -Type NoteProperty 创建、编辑配置文件 notepad $PROFILE 如果配置文件首次设置后, 打开 PowerShell 时显示
无法加载文件 C:\Users\Ma\Documents\WindowsPowerShell\Microsoft.PowerShell_profile.ps1，因为在此系统上禁止运行脚本。
需要以管理员身份运行以下脚本, 修改执行策略以允许加载配置文件
Set-ExecutionPolicy RemoteSigned 使用配置文件 在 PowerShell 中创建的许多项和运行的大多数命令仅影响当前会话。 结束会话时，将删除这些项。
特定于会话的命令和项包括添加到会话的 PowerShell 变量、环境变量、别名、函数、命令和 PowerShell 模块。
若要保存这些项并使其在所有将来的会话中可用，请将它们添加到 PowerShell 配置文件。
配置文件的另一个常见用途是保存常用函数、别名和变量。 将项目保存在配置文件中时，可以在任何适用的会话中使用它们，而无需重新创建它们。
导入第三方库 Terminal-Icons 美化终端
Import-Module Terminal-Icons 保存常用函数, 如 将 history 设置为查看所有历史命令, 而非仅仅当前会话的历史命令</description>
        </item>
        <item>
        <title>Powershell Remove Duplicate Files</title>
        <link>https://frank2016ma.github.io/seattle/posts/powershell-remove-duplicate-files/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>https://frank2016ma.github.io/seattle/posts/powershell-remove-duplicate-files/</guid>
        <description>PowerShell 脚本 删除重复文件(根据文件哈希值判重)
$root_path = &amp;#34;D:\folder_name&amp;#34; $log_file = &amp;#34;D:\log_file.txt&amp;#34; ls $root_path -recurse | get-filehash | group -property hash | where { $_.count -gt 1 } | % { $_.group } | epcsv $log_file </description>
        </item>
        <item>
        <title>Tldr</title>
        <link>https://frank2016ma.github.io/seattle/posts/tldr/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>https://frank2016ma.github.io/seattle/posts/tldr/</guid>
        <description>简介 tldr(Too Long; Didn&amp;rsquo;t Read) 是一个开源的命令行工具，提供简洁的命令行使用文档
tldr 提供了 web端 tldr InBrowser.App, nodejs 和 python 客户端以及 PDF版本
安装 # nodejs npm install tldr # python pip3 install tldr 使用 tldr sed sed Edit text in a scriptable manner. See also: `awk`, `ed`. More information: https://www.gnu.org/software/sed/manual/sed.html. - Replace all `apple` (basic regex) occurrences with `mango` (basic regex) in all input lines and print the result to `stdout`: command | sed &#39;s/apple/mango/g&#39; - Execute a specific script [f]ile and print the result to `stdout`: command | sed -f path/to/script.</description>
        </item>
        <item>
        <title>Tmux</title>
        <link>https://frank2016ma.github.io/seattle/posts/tmux/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>https://frank2016ma.github.io/seattle/posts/tmux/</guid>
        <description># 新建会话 tmux new -s session_name # Attach to last session tmux a # Attach to a session with the name mysession tmux a -t mysession 常用快捷键 将当前会话与窗口分离
Ctrl+b d
列出当前所有会话(此快捷键需要在tmux会话内执行)
Ctrl+b s
划分左右两个窗格
Ctrl+b %
划分上下两个窗格
Ctrl+b &amp;quot;
关闭当前窗格
Ctrl+b x
调整窗格大小 Ctrl+b Ctrl+方向键
copy mode 进入窗口之后不支持上下翻页, 使用以下快捷键进入 copy mode
Ctrl+b [
按 q 退出
参考 Tmux Cheat Sheet &amp;amp; Quick Reference
Tips tmux划分窗格后, 只能通过 Ctrl+b + 方向键 在不同的窗格之间切换光标焦点, 并且在tmux窗口中, 需要进入copy mode才能上下翻页, 所以个人在日常使用中, 并不会经常使用tmux的拆分窗格等功能, 更多的是使用客户端软件(如 xshell, Windows Terminal)自带的拆分窗口功能, 一个账号同时登录多个会话(不执行影响其他会话的命令), 切换窗口和翻页更方便</description>
        </item>
        <item>
        <title>vscode key shortcuts</title>
        <link>https://frank2016ma.github.io/seattle/posts/vscode-keys/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>https://frank2016ma.github.io/seattle/posts/vscode-keys/</guid>
        <description>   多光标操作 ====     Ctrl+I 选中当前行   Shift+Alt+I 将光标插入所选每行的末尾   Ctrl+Shift+L 选择所有与所选中内容相同的内容   Ctrl+F2 选择所有与所选中词汇相同的内容       编辑器控制 ====     Ctrl+\ 拆分编辑器为多组   Ctrl+ 1 / 2 / 3 切换窗口焦点至某一组       文件管理 ====     Ctrl+K P 复制当前文件路径   Ctrl+K R 打开当前文件所在文件夹       显示 ====     Shift+Alt+0 切换编辑器布局（水平/垂直）   Ctrl+Shift+F 显示搜索界面   Ctrl+Shift+X 显示插件管理界面   Ctrl+K V 预览Markdown文件（侧边）   Ctrl+K Z 禅模式（连按两次Esc退出）       语言操作 ====     Ctrl+K Ctrl+X 移除行尾空白字符       基础编辑 ====     Ctrl+Shift+K 删除行   Ctrl+Enter 在当前行下方插入新行   Ctrl+Shift+Enter 在当前行上方插入新行   Shift+Alt+A 切换块注释   Alt+Z 切换自动换行   Ctrl+K Ctrl+[ 折叠当前所有子代码块   Ctrl+K Ctrl+] 展开当前所有子代码块    </description>
        </item>
        
    </channel>
</rss>
