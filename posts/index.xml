<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>Posts on Frank in seattle</title>
        <link>https://frank2016ma.github.io/seattle/posts/</link>
        <description>Recent content in Posts on Frank in seattle</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>en-us</language>
        <lastBuildDate>Tue, 25 Jul 2023 00:00:00 +0000</lastBuildDate><atom:link href="https://frank2016ma.github.io/seattle/posts/index.xml" rel="self" type="application/rss+xml" /><item>
        <title>关于 Excel 单元格数字格式、真实值和显示值</title>
        <link>https://frank2016ma.github.io/seattle/posts/windows/excel/excel-realvalue-displayvalue/</link>
        <pubDate>Tue, 25 Jul 2023 00:00:00 +0000</pubDate>
        
        <guid>https://frank2016ma.github.io/seattle/posts/windows/excel/excel-realvalue-displayvalue/</guid>
        <description>在使用脚本语言对Excel文件进行操作时, 有时会发现, 脚本读取出的值和实际在Excel单元格中显示的值不一致的情况 搜索资料后整理出如下笔记
Number Format(数字格式) Excel 已经有许多内置的数字格式, 如 货币, 百分比等, 你还可以根据自己的需求设置自定义的数字格式
 Applying a number format only changes how the number is displayed and doesn’t affect cell values that’s used to perform calculations. You can see the actual value in the formula bar.
应用数字格式只会改变数字的显示方式, 并不会影响用于计算的单元格值. 在公式栏(编辑栏)中可以看到实际的值
  注意: 公式栏中显示的也不一定是单元格内容的真实值, 有些数字格式, 本身是一种复杂的数据类型, 比如日期, 公式栏中显示的值, 类似编程语言中默认的 toString() 方法的结果, 而对单元格设置数字格式后的显示值, 类似 format() 方法的结果
 单元格的数字精度问题 当数字的长度达到12位及以上, 会自动以科学计数法显示该数字(仅限Microsoft Excel)
经实测在WPS表格中, 数字达到12位及以上, 会以文本格式显示该内容(默认靠左对齐, 完整显示内容), 而非科学计数法</description>
        </item>
        <item>
        <title>编程文档中的 Foo Bar</title>
        <link>https://frank2016ma.github.io/seattle/posts/others/foo-bar/</link>
        <pubDate>Wed, 31 May 2023 00:00:00 +0000</pubDate>
        
        <guid>https://frank2016ma.github.io/seattle/posts/others/foo-bar/</guid>
        <description>许多软件文档中, 代码示例的部分, 经常会使用 &amp;lsquo;foobar&amp;rsquo;或者 &amp;lsquo;foo&amp;rsquo;, &amp;lsquo;bar&amp;rsquo; 作为变量, 这两个单词具体是什么意思有点困惑, 词典给出的中文翻译都联系不上
tl;dr:
结合国情来理解, foo 和 bar 就是课文中的小明和小红, 罗翔刑法案例中的张三, 张宇高数课, 等价无穷小公式中的狗
以下是维基百科给出的详细解释:
Foobar - Wikipedia
 在编程中, 还有许多类似的约定俗成的占位符
比如 python 中的 单下划线_, 表示某个临时的无关紧要的变量
xargs命令参数中的 -I {}
find命令 -exec 参数后 的 {}</description>
        </item>
        <item>
        <title>golang 日期格式化</title>
        <link>https://frank2016ma.github.io/seattle/posts/golang/go-time-format-2006-01-02/</link>
        <pubDate>Tue, 30 May 2023 00:00:00 +0000</pubDate>
        
        <guid>https://frank2016ma.github.io/seattle/posts/golang/go-time-format-2006-01-02/</guid>
        <description>大部分编程语言中, 格式化日期的方式都是使用 YYYMMddHHMMSS 类似的字符串, 又或者是 %Y%m 之类的字符串
而 golang 比较奇特, 日期格式化是使用一个具体的日期常量 2006-01-02 15:04:05 的不同表示方法来设置格式
 这个日期可以记为 1 月 2 日, 下午 3 点 4 分 5 秒, 06 年 -7 时区
 </description>
        </item>
        <item>
        <title>VBA 笔记</title>
        <link>https://frank2016ma.github.io/seattle/posts/windows/excel/vba-notebook/</link>
        <pubDate>Tue, 30 May 2023 00:00:00 +0000</pubDate>
        
        <guid>https://frank2016ma.github.io/seattle/posts/windows/excel/vba-notebook/</guid>
        <description>VBA(For Excel) Excel 单元格内容格式 单元格里的数据类型系统是根据数据内容确定的, 比如：你将 A 列单元格格式设为保留两位的数值型, 当你在 A1 输入 5 时, 它就显示为 5.00, 如果输入 ABC, 它就不会变成数值型, 而是文本型, 如果将文本改为数字后, 又回到你设置的保留两位小数格式所以单元格设置格式只能对能转换的数据有效(当你设置为文本型后，所有输入字符都能转换为文本，可以理解为文本型才是单元格真正能设置的格式)
相对地址 &amp;amp; 绝对地址($) 在单元格引用中, $表示 绝对引用, 绝对引用能够在自动填充和复制粘贴时保持引用单元格的绝对位置
如果C2单元格值为 =A2*B2, 自动填充后, C3单元格值为 =A3*B3
如果C2单元格值为 =$A$2*B2, 自动填充后, C3单元格值为 =$A$2*B3
引用单元格   A1 表示法
Range(&amp;ldquo;A1&amp;rdquo;)
Range(&amp;ldquo;A1:B5&amp;rdquo;)
Range(&amp;ldquo;A1:B5,C1:D5&amp;rdquo;)
Range(&amp;ldquo;A:A&amp;rdquo;)
Range(&amp;ldquo;1:1&amp;rdquo;)
Range(&amp;ldquo;A:C&amp;rdquo;)
Range(&amp;ldquo;1:5&amp;rdquo;)
Range(&amp;ldquo;1:1,3:3,8:8&amp;rdquo;)
Range(&amp;ldquo;A:A,C:C,F:F&amp;rdquo;)
  索引编号(适合用于循环)
Cells(6, 1)
  快捷表示法
[A1:B5]
  相对引用
Offset(Row, Col)
  Range 表示连续的区域有两种表达:  Range(&amp;ldquo;起始单元格&amp;rdquo;,&amp;ldquo;结束单元格&amp;rdquo;) Range(&amp;ldquo;起始单元格:结束单元格&amp;rdquo;)  Range 表示非连续的区域: Range(&amp;quot;A1:A2, B3:B4&amp;quot;).</description>
        </item>
        <item>
        <title>Csharp 调用外部exe</title>
        <link>https://frank2016ma.github.io/seattle/posts/windows/dotnet/csharp-call-command-line/</link>
        <pubDate>Mon, 29 May 2023 00:00:00 +0000</pubDate>
        
        <guid>https://frank2016ma.github.io/seattle/posts/windows/dotnet/csharp-call-command-line/</guid>
        <description>C# 中可以通过 Diagnostics.Process 类来实现调用外部的可执行文件
下面是一段调用 PowerPoint 演示幻灯片的脚本:
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17  using System.Diagnostics; namespace awake { class Program { static void Main(string[] args) { Process p = new Process(); // powershell 的命令行工具  p.StartInfo.FileName = &amp;#34;C:\\Program Files (x86)\\Microsoft Office\\Office16\\POWERPNT.EXE&amp;#34;; // /S 后面跟着命令的参数  p.StartInfo.Arguments = &amp;#34;/S \&amp;#34;E:\\mail\\keep awake.pptx\&amp;#34;&amp;#34;; p.StartInfo.CreateNoWindow = true; p.StartInfo.UseShellExecute = false; p.Start(); } } }   </description>
        </item>
        <item>
        <title>7z 命令行使用</title>
        <link>https://frank2016ma.github.io/seattle/posts/others/7z-cli-extract-zip/</link>
        <pubDate>Fri, 26 May 2023 00:00:00 +0000</pubDate>
        
        <guid>https://frank2016ma.github.io/seattle/posts/others/7z-cli-extract-zip/</guid>
        <description>7z 命令行基本语法为
1  7z &amp;lt;command&amp;gt; [&amp;lt;switch&amp;gt;...] &amp;lt;base_archive_name&amp;gt; [&amp;lt;arguments&amp;gt;...]   通配符 *.txt: means all files with an extension of &amp;ldquo;.txt&amp;rdquo; ?a*: means all files with a second character of &amp;ldquo;a&amp;rdquo; *1*: means all names that contains character &amp;ldquo;1&amp;rdquo; *.*.*: means all names that contain two at least &amp;ldquo;.&amp;rdquo; characters
commands l (List) 列出压缩文件中的所有内容
1  7z l archive.zip   a (Add) 1 2 3 4 5 6 7 8 9  7z a -tzip archive.</description>
        </item>
        <item>
        <title>TOML 配置文件</title>
        <link>https://frank2016ma.github.io/seattle/posts/others/toml/</link>
        <pubDate>Thu, 25 May 2023 00:00:00 +0000</pubDate>
        
        <guid>https://frank2016ma.github.io/seattle/posts/others/toml/</guid>
        <description>规格  TOML 是大小写敏感的 TOML 文件必须是合法的 UTF-8 编码的 Unicode 文档 空白是指制表符(0x09)或空格(0x20) 换行是指 LF(0x0A)或 CRLF(0x0D 0x0A) 使用 # 符号作为注释  键值对 TOML 文档最基本的构成区块是键值对, 键名和键值周围的空白会被忽略
多次定义同一个key是非法的
1  key = &amp;#34;value&amp;#34;   点分隔符 1 2 3 4  name = &amp;#34;Orange&amp;#34; physical.color = &amp;#34;orange&amp;#34; physical.shape = &amp;#34;round&amp;#34; site.&amp;#34;google.com&amp;#34; = true # 引号内的点不会作为分隔符   等价于
1 2 3 4 5 6 7 8 9 10  { &amp;#34;name&amp;#34;: &amp;#34;Orange&amp;#34;, &amp;#34;physical&amp;#34;: { &amp;#34;color&amp;#34;: &amp;#34;orange&amp;#34;, &amp;#34;shape&amp;#34;: &amp;#34;round&amp;#34; }, &amp;#34;site&amp;#34;: { &amp;#34;google.</description>
        </item>
        <item>
        <title>更改xlsm文件中的宏脚本编码</title>
        <link>https://frank2016ma.github.io/seattle/posts/windows/dotnet/convert-xlsm-macro-encoding/</link>
        <pubDate>Thu, 25 May 2023 00:00:00 +0000</pubDate>
        
        <guid>https://frank2016ma.github.io/seattle/posts/windows/dotnet/convert-xlsm-macro-encoding/</guid>
        <description>之前任职于一家台湾公司, 公司员工电脑默认的默认编码格式使用的是港台地区的 Big5 编码, 俗称 大五码, 且员工没有管理员权限, 不能修改, 而服务器使用的编码是GBK
由于VBA年代比较久, 使用的还是代码页表示不同语言的字符集(GBK的代码页 936, Big5 的代码页面 950), 没有使用Unicode, 当在员工电脑录制编写的VBA脚本, 保存在xlsm文件中, 需要放到服务器上去执行时, 中文部分会显示乱码
于是, 编写了下面这段代码来转换xlsm文件中的VBA脚本编码, 主要做了以下事情
 将xlsm文件中的VBA代码导出为.bas代码文件 转换纯文本代码文件的编码格式(big5改为GBK) 将转换编码之后的代码导入xlsm文件 生成exe后, 可以通过命令行执行, 也可以直接拖动图标将xlsm文件拖到生成的.exe文件上  如果有需求要批量导出xlsm文件中的脚本代码, 下面的代码修改一下也可以实现
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72  using System; using System.</description>
        </item>
        <item>
        <title>bilibili 视频 shortcode 测试</title>
        <link>https://frank2016ma.github.io/seattle/posts/others/bilibili-video-test/</link>
        <pubDate>Sat, 13 May 2023 00:00:00 +0000</pubDate>
        
        <guid>https://frank2016ma.github.io/seattle/posts/others/bilibili-video-test/</guid>
        <description>测试 hugo 主题 stack 中的 bilibili 视频 shortcode
</description>
        </item>
        <item>
        <title>MIME</title>
        <link>https://frank2016ma.github.io/seattle/posts/others/mime/</link>
        <pubDate>Fri, 28 Apr 2023 00:00:00 +0000</pubDate>
        
        <guid>https://frank2016ma.github.io/seattle/posts/others/mime/</guid>
        <description>MIME 类型 MIME (Multipurpose Internet Mail Extensions) 是描述消息内容类型的标准，用来表示文档、文件或字节流的性质和格式。
MIME 消息能包含文本、图像、音频、视频以及其他应用程序专用的数据。
浏览器通常使用 MIME 类型（而不是文件扩展名）来确定如何处理URL，因此 We b服务器在响应头中添加正确的 MIME 类型非常重要。如果配置不正确，浏览器可能会无法解析文件内容，网站将无法正常工作，并且下载的文件也会被错误处理。
语法 MIME 类型通用结构：
 type/subtype
 MIME 的组成结构非常简单，由类型与子类型两个字符串中间用 / 分隔而组成，不允许有空格。type 表示可以被分多个子类的独立类别，subtype 表示细分后的每个类型。
MIME类型对大小写不敏感，但是传统写法都是小写。
两种主要的 MIME 类型在默认类型中扮演了重要的角色：
 text/plain 表示文本文件的默认值。 application/octet-stream 表示所有其他情况的默认值。   摘自 MIME 类型 | 菜鸟教程</description>
        </item>
        <item>
        <title>Powershell 删除重复文件脚本</title>
        <link>https://frank2016ma.github.io/seattle/posts/windows/powershell/powershell-remove-duplicate-files/</link>
        <pubDate>Thu, 27 Apr 2023 00:00:00 +0000</pubDate>
        
        <guid>https://frank2016ma.github.io/seattle/posts/windows/powershell/powershell-remove-duplicate-files/</guid>
        <description>1 2 3  $root_path = &amp;#34;D:\folder_name&amp;#34; $log_file = &amp;#34;D:\log_file.txt&amp;#34; ls $root_path -recurse | get-filehash | group -property hash | where { $_.count -gt 1 } | % { $_.group } | epcsv $log_file   </description>
        </item>
        <item>
        <title>Win11 笔记本亮度调节</title>
        <link>https://frank2016ma.github.io/seattle/posts/others/win11-brightness/</link>
        <pubDate>Wed, 12 Apr 2023 00:00:00 +0000</pubDate>
        
        <guid>https://frank2016ma.github.io/seattle/posts/others/win11-brightness/</guid>
        <description>Windows11 系统的笔记本电脑在使用电源时, 会出现偶尔屏幕变暗又恢复的情况
解决方法:
打开 设置 &amp;gt; 系统 &amp;gt; 屏幕, 点击亮度调节 右侧下拉选项, 取消勾选 通过优化显示的内容和亮度降低电池能耗</description>
        </item>
        <item>
        <title>Microsoft Excel 横向滚动</title>
        <link>https://frank2016ma.github.io/seattle/posts/others/microsoft-excel-scroll/</link>
        <pubDate>Tue, 11 Apr 2023 00:00:00 +0000</pubDate>
        
        <guid>https://frank2016ma.github.io/seattle/posts/others/microsoft-excel-scroll/</guid>
        <description>浏览器 WPS Office 及及大部分支持横向滚动的桌面端软件, 支持 Shift + 鼠标滚轮 实现横向滚动
Microsoft Office 的 Excel 横向滚动的方式是 Ctrl + Shift + 鼠标滚轮</description>
        </item>
        <item>
        <title>Gpt_Mirror</title>
        <link>https://frank2016ma.github.io/seattle/posts/others/gpt_mirror/</link>
        <pubDate>Sun, 09 Apr 2023 00:00:00 +0000</pubDate>
        
        <guid>https://frank2016ma.github.io/seattle/posts/others/gpt_mirror/</guid>
        <description>GPT-Mirror</description>
        </item>
        <item>
        <title>Everything Search Tool</title>
        <link>https://frank2016ma.github.io/seattle/posts/others/everything-search-tool/</link>
        <pubDate>Mon, 03 Apr 2023 00:00:00 +0000</pubDate>
        
        <guid>https://frank2016ma.github.io/seattle/posts/others/everything-search-tool/</guid>
        <description>&amp;ldquo;Everything&amp;rdquo; 是什么？ &amp;ldquo;Everything&amp;rdquo; 是 Windows 上一款搜索引擎，它能够基于文件名快速定文件和文件夹位置。
如何在运行 &amp;ldquo;Everything&amp;rdquo; 时屏蔽 UAC 警告？ &amp;ldquo;Everything&amp;rdquo; 需要管理员权限以便低级别读取 NTFS 分卷来 NTFS 索引。
UAC 警告可以通过以标准用户运行 &amp;ldquo;Everything&amp;rdquo; 和安装 &amp;ldquo;Everything&amp;rdquo; 服务或不使用 NTFS 索引来避免。
以标准用户运行 &amp;ldquo;Everything&amp;rdquo; 和安装 &amp;ldquo;Everything&amp;rdquo; 服务：
在 &amp;ldquo;Everything&amp;rdquo; 中，打开工具菜单，点击选项。
  点击常规页面。
  检查 Everything 服务。
  取消以管理员方式运行。
  点击确定。
  退出 &amp;ldquo;Everything&amp;rdquo; (右键 Everything 托盘图标并点击退出)。
  重启 Everything。
  搜索 &amp;ldquo;Everything&amp;rdquo; 能否搜索文件内容？ 可以，&amp;ldquo;Everything&amp;rdquo; 可以通过搜索函数 content: 来搜索文件内容。
文件内容未被索引时，搜索内容将会很慢。
如何使用通配符？ 搜索关键词中使用通配符 * 将会匹配任意数量的任意字符。</description>
        </item>
        <item>
        <title>PowerShell 查看历史命令</title>
        <link>https://frank2016ma.github.io/seattle/posts/windows/powershell/powershell-history/</link>
        <pubDate>Sun, 02 Apr 2023 00:00:00 +0000</pubDate>
        
        <guid>https://frank2016ma.github.io/seattle/posts/windows/powershell/powershell-history/</guid>
        <description>Get-History PowerShell 的 Get-History 命令只显示当前会话的历史命令
关闭当前窗口再打开一个新的PowerShell窗口时, 先前窗口中输入的历史命令无法使用 Get-History 获取到
PowerShell 没有类似 Linux bash 下的 history 一样, 直接查看所有会话的历史命令的 Cmdlet
但是和 bash 一样, PowerShell 将所有会话的命令历史记录存储在文本文件中
这个文件的路径可以通过命令 (Get-PSReadlineOption).HistorySavePath 获取到
Get-PSReadlineOption Get-PSReadlineOption 命令 包含在 PSReadLine 模块下, 该模块需要 PowerShell 5.1 或更高的版本
可以通过以下命令来实现查看所有命令历史记录
1  Get-Content (Get-PSReadlineOption).HistorySavePath    Tips: 如果历史命令中包含中文等非ASCII字符, 需要使用对应的编码读取该文本文件, 否则会显示乱码
 PowerShell 编码 PowerShell 5.1 中 Get-Content 命令的 -Encoding 参数默认是 Default
Default 使用与系统的活动代码页相对应的编码 (通常为 ANSI)
而在 PowerShell 7.2 中, Get-Content 命令的 -Encoding 参数默认是 utf8NoBOM</description>
        </item>
        <item>
        <title>PowerShell 配置文件</title>
        <link>https://frank2016ma.github.io/seattle/posts/windows/powershell/powershell-profile/</link>
        <pubDate>Sun, 02 Apr 2023 00:00:00 +0000</pubDate>
        
        <guid>https://frank2016ma.github.io/seattle/posts/windows/powershell/powershell-profile/</guid>
        <description>简短说明 介绍如何创建和使用 PowerShell 配置文件
长说明 PowerShell 配置文件是在 PowerShell 启动时运行的脚本。 可以使用配置文件作为启动脚本来自定义环境。 可以添加命令、别名、函数、变量、模块、PowerShell 驱动器等。 还可以将其他特定于会话的元素添加到配置文件中，使其在每个会话中可用，而无需导入或重新创建它们。 PowerShell 支持用户和主机程序的多个配置文件。 但是，它不会为你创建配置文件。
$PROFILE 变量 变量 $PROFILE 存储 当前用户，当前主机 配置文件 的路径。
其他配置文件保存在 变量的注释属性中, 可通过以下命令查看对应类型配置文件的路径
1  $PROFILE | Get-Member -Type NoteProperty   创建、编辑配置文件 1  notepad $PROFILE   如果配置文件首次设置后, 打开 PowerShell 时显示
无法加载文件 C:\Users\Ma\Documents\WindowsPowerShell\Microsoft.PowerShell_profile.ps1，因为在此系统上禁止运行脚本。
需要以管理员身份运行以下脚本, 修改执行策略以允许加载配置文件
1  Set-ExecutionPolicy RemoteSigned   使用配置文件 在 PowerShell 中创建的许多项和运行的大多数命令仅影响当前会话。 结束会话时，将删除这些项。
特定于会话的命令和项包括添加到会话的 PowerShell 变量、环境变量、别名、函数、命令和 PowerShell 模块。
若要保存这些项并使其在所有将来的会话中可用，请将它们添加到 PowerShell 配置文件。</description>
        </item>
        <item>
        <title>VScode 快捷键</title>
        <link>https://frank2016ma.github.io/seattle/posts/others/vscode-keys/</link>
        <pubDate>Sun, 02 Apr 2023 00:00:00 +0000</pubDate>
        
        <guid>https://frank2016ma.github.io/seattle/posts/others/vscode-keys/</guid>
        <description>多光标操作     ====     Ctrl+I 选中当前行   Shift+Alt+I 将光标插入所选每行的末尾   Ctrl+Shift+L 选择所有与所选中内容相同的内容   Ctrl+F2 选择所有与所选中词汇相同的内容    编辑器控制     ====     Ctrl+\ 拆分编辑器为多组   Ctrl+ 1 / 2 / 3 切换窗口焦点至某一组    文件管理     ====     Ctrl+K P 复制当前文件路径   Ctrl+K R 打开当前文件所在文件夹    显示     ====     Shift+Alt+0 切换编辑器布局(水平/垂直)   Ctrl+Shift+F 显示搜索界面   Ctrl+Shift+X 显示插件管理界面   Ctrl+K V 预览 Markdown 文件（侧边）   Ctrl+K Z 禅模式（连按两次 Esc 退出）    语言操作     ====     Ctrl+K Ctrl+X 移除行尾空白字符    基础编辑     ====     Ctrl+Shift+K 删除行   Ctrl+Enter 在当前行下方插入新行   Ctrl+Shift+Enter 在当前行上方插入新行   Shift+Alt+A 切换块注释   Alt+Z 切换自动换行   Ctrl+K Ctrl+[ 折叠当前所有子代码块   Ctrl+K Ctrl+] 展开当前所有子代码块     写文章时经常遇到一些英文名词以及缩写, 需要频繁切换输入法中英文以及大小写, 非常不方便, vscode 自带的命令转换选中内容的功能</description>
        </item>
        <item>
        <title>Powershell 笔记</title>
        <link>https://frank2016ma.github.io/seattle/posts/windows/powershell/powershell-basic/</link>
        <pubDate>Fri, 13 May 2022 00:00:00 +0000</pubDate>
        
        <guid>https://frank2016ma.github.io/seattle/posts/windows/powershell/powershell-basic/</guid>
        <description>Get-Content 将从文件读取的数据视为数组, 每行文件内容为一个数组元素
传统的Cmd管道是基于文本的, 但是Powershell是基于对象的.
  为什么可以通过notpad打开记事本, 不能通过wordpad打开写字板？
因为notepad.exe位于C:Windows\system32这个目录, 而这个目录已经默认被包含在Powershell的环境变量$env:Path中.
而wordpad.exe所在的%ProgramFiles%\Windows NT\Accessories目录却没有包含,
将wordpad所在的目录加入到环境变量中, $env:Path=$env:Path+&amp;quot;%ProgramFiles%\Windows NT\Accessories&amp;quot;.
  常用的对管道结果进一步处理的命令有：
   命令 解释     Compare-Object 比较两组对象.   ConvertTo-Html 将 Microsoft .NET Framework 对象转换为可在 Web 浏览器中显示的 HTML.   Export-Clixml 创建对象的基于 XML 的表示形式并将其存储在文件中.   Export-Csv 将 Microsoft .NET Framework 对象转换为一系列以逗号分隔的、长度可变的 (CSV) 字符串, 并将这些字符串保存到一个 CSV 文件中.   ForEach-Object 针对每一组输入对象执行操作.   Format-List 将输出的格式设置为属性列表, 其中每个属性均各占一行显示.   Format-Table 将输出的格式设置为表.</description>
        </item>
        
    </channel>
</rss>
