<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>tools on Frank in seattle</title>
        <link>https://frank2016ma.github.io/seattle/tags/tools/</link>
        <description>Recent content in tools on Frank in seattle</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>en-us</language>
        <lastBuildDate>Fri, 19 May 2023 00:00:00 +0000</lastBuildDate><atom:link href="https://frank2016ma.github.io/seattle/tags/tools/index.xml" rel="self" type="application/rss+xml" /><item>
        <title>关于SSH长时间无操作自动断开</title>
        <link>https://frank2016ma.github.io/seattle/posts/ssh-timeout/</link>
        <pubDate>Fri, 19 May 2023 00:00:00 +0000</pubDate>
        
        <guid>https://frank2016ma.github.io/seattle/posts/ssh-timeout/</guid>
        <description>使用 ssh 客户端远程连接到服务器时, 默认情况下, 一段时间不操作, 没有向服务器发送指令, 就自动断开了连接, 需要重新登录
使用过的客户端中, xshell 默认情况下是会自动发送心跳来保持连接, 其他的一些如 mobaxterm, windterm, windows terminal自带的ssh, 时间久没有操作都是会断开连接的, 需要手动设置, 以下是手动设置的方法
 命令行参数设置  如果是在终端中使用ssh命令连接远程机器, 如在Windows Terminal中, 可以通过添加以下参数来设置每隔60秒向Server端发送一个空包以保持连接
ssh -o ServerAliveInterval=60 root@127.0.0.1 使用以上参数只会对本次连接会话有效, 如果需要每次都自动保持连接, 可以使用下面的方法
客户端.ssh/config文件设置  ~/.ssh/config 文件中添加ServerAliveInterval 60
Host xxx HostName 127.0.0.1 User root ServerAliveInterval 60 </description>
        </item>
        <item>
        <title>Everything Search Tool</title>
        <link>https://frank2016ma.github.io/seattle/posts/everything-search-tool/</link>
        <pubDate>Mon, 03 Apr 2023 22:28:49 +0800</pubDate>
        
        <guid>https://frank2016ma.github.io/seattle/posts/everything-search-tool/</guid>
        <description>&amp;ldquo;Everything&amp;rdquo; 是什么？ &amp;ldquo;Everything&amp;rdquo; 是 Windows 上一款搜索引擎，它能够基于文件名快速定文件和文件夹位置。
如何在运行 &amp;ldquo;Everything&amp;rdquo; 时屏蔽 UAC 警告？ &amp;ldquo;Everything&amp;rdquo; 需要管理员权限以便低级别读取 NTFS 分卷来 NTFS 索引。
UAC 警告可以通过以标准用户运行 &amp;ldquo;Everything&amp;rdquo; 和安装 &amp;ldquo;Everything&amp;rdquo; 服务或不使用 NTFS 索引来避免。
以标准用户运行 &amp;ldquo;Everything&amp;rdquo; 和安装 &amp;ldquo;Everything&amp;rdquo; 服务：
在 &amp;ldquo;Everything&amp;rdquo; 中，打开工具菜单，点击选项。
  点击常规页面。
  检查 Everything 服务。
  取消以管理员方式运行。
  点击确定。
  退出 &amp;ldquo;Everything&amp;rdquo; (右键 Everything 托盘图标并点击退出)。
  重启 Everything。
  搜索 &amp;ldquo;Everything&amp;rdquo; 能否搜索文件内容？ 可以，&amp;ldquo;Everything&amp;rdquo; 可以通过搜索函数 content: 来搜索文件内容。
文件内容未被索引时，搜索内容将会很慢。
如何使用通配符？ 搜索关键词中使用通配符 * 将会匹配任意数量的任意字符。</description>
        </item>
        <item>
        <title>Bookmarklet</title>
        <link>https://frank2016ma.github.io/seattle/posts/bookmarklet/</link>
        <pubDate>Mon, 27 Mar 2023 00:00:00 +0000</pubDate>
        
        <guid>https://frank2016ma.github.io/seattle/posts/bookmarklet/</guid>
        <description>Bookmarklet 是什么 A bookmarklet is a bookmark stored in a web browser that contains JavaScript commands that add new features to the browser. They are stored as the URL of a bookmark in a web browser or as a hyperlink on a web page. Bookmarklets are usually small snippets of JavaScript executed when user clicks on them. When clicked, bookmarklets can perform a wide variety of operations, such as running a search query from selected text or extracting data from a table.</description>
        </item>
        <item>
        <title>Find Cheat Sheet</title>
        <link>https://frank2016ma.github.io/seattle/posts/find-cheat-sheet/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>https://frank2016ma.github.io/seattle/posts/find-cheat-sheet/</guid>
        <description>Usage find [path...] [options] [expression] # Wildcard find . -name &amp;#34;*.txt&amp;#34; find . -name &amp;#34;2020*.csv&amp;#34; find . -name &amp;#34;json_*&amp;#34; # regex # TODO # directory find . -type d # file find . -type f ## Size # Find all bigger than 10MB files, 查找大于10M的文件 find . -size +10M # Find all smaller than 10MB files, 查找小于10M的文件 find . -size -10M # Find Size between 100MB and 1GB, 查找大于100M且小于1G的文件 find .</description>
        </item>
        <item>
        <title>Tldr</title>
        <link>https://frank2016ma.github.io/seattle/posts/tldr/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>https://frank2016ma.github.io/seattle/posts/tldr/</guid>
        <description>简介 tldr(Too Long; Didn&amp;rsquo;t Read) 是一个开源的命令行工具，提供简洁的命令行使用文档
tldr 提供了 web端 tldr InBrowser.App, nodejs 和 python 客户端以及 PDF版本
安装 # nodejs npm install tldr # python pip3 install tldr 使用 tldr sed sed Edit text in a scriptable manner. See also: `awk`, `ed`. More information: https://www.gnu.org/software/sed/manual/sed.html. - Replace all `apple` (basic regex) occurrences with `mango` (basic regex) in all input lines and print the result to `stdout`: command | sed &#39;s/apple/mango/g&#39; - Execute a specific script [f]ile and print the result to `stdout`: command | sed -f path/to/script.</description>
        </item>
        <item>
        <title>Tmux</title>
        <link>https://frank2016ma.github.io/seattle/posts/tmux/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>https://frank2016ma.github.io/seattle/posts/tmux/</guid>
        <description># 新建会话 tmux new -s session_name # Attach to last session tmux a # Attach to a session with the name mysession tmux a -t mysession 常用快捷键 将当前会话与窗口分离
Ctrl+b d
列出当前所有会话(此快捷键需要在tmux会话内执行)
Ctrl+b s
划分左右两个窗格
Ctrl+b %
划分上下两个窗格
Ctrl+b &amp;quot;
关闭当前窗格
Ctrl+b x
调整窗格大小 Ctrl+b Ctrl+方向键
copy mode 进入窗口之后不支持上下翻页, 使用以下快捷键进入 copy mode
Ctrl+b [
按 q 退出
参考 Tmux Cheat Sheet &amp;amp; Quick Reference
Tips tmux划分窗格后, 只能通过 Ctrl+b + 方向键 在不同的窗格之间切换光标焦点, 并且在tmux窗口中, 需要进入copy mode才能上下翻页, 所以个人在日常使用中, 并不会经常使用tmux的拆分窗格等功能, 更多的是使用客户端软件(如 xshell, Windows Terminal)自带的拆分窗口功能, 一个账号同时登录多个会话(不执行影响其他会话的命令), 切换窗口和翻页更方便</description>
        </item>
        <item>
        <title>vscode key shortcuts</title>
        <link>https://frank2016ma.github.io/seattle/posts/vscode-keys/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>https://frank2016ma.github.io/seattle/posts/vscode-keys/</guid>
        <description>   多光标操作 ====     Ctrl+I 选中当前行   Shift+Alt+I 将光标插入所选每行的末尾   Ctrl+Shift+L 选择所有与所选中内容相同的内容   Ctrl+F2 选择所有与所选中词汇相同的内容       编辑器控制 ====     Ctrl+\ 拆分编辑器为多组   Ctrl+ 1 / 2 / 3 切换窗口焦点至某一组       文件管理 ====     Ctrl+K P 复制当前文件路径   Ctrl+K R 打开当前文件所在文件夹       显示 ====     Shift+Alt+0 切换编辑器布局（水平/垂直）   Ctrl+Shift+F 显示搜索界面   Ctrl+Shift+X 显示插件管理界面   Ctrl+K V 预览Markdown文件（侧边）   Ctrl+K Z 禅模式（连按两次Esc退出）       语言操作 ====     Ctrl+K Ctrl+X 移除行尾空白字符       基础编辑 ====     Ctrl+Shift+K 删除行   Ctrl+Enter 在当前行下方插入新行   Ctrl+Shift+Enter 在当前行上方插入新行   Shift+Alt+A 切换块注释   Alt+Z 切换自动换行   Ctrl+K Ctrl+[ 折叠当前所有子代码块   Ctrl+K Ctrl+] 展开当前所有子代码块    </description>
        </item>
        
    </channel>
</rss>
