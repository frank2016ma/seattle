<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>PowerShell on Frank in seattle</title>
        <link>https://www.frankinseattle.top/tags/powershell/</link>
        <description>Recent content in PowerShell on Frank in seattle</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>en-us</language>
        <lastBuildDate>Sun, 02 Apr 2023 11:42:36 +0800</lastBuildDate><atom:link href="https://www.frankinseattle.top/tags/powershell/index.xml" rel="self" type="application/rss+xml" /><item>
        <title>PowerShell History</title>
        <link>https://www.frankinseattle.top/posts/powershell-history/</link>
        <pubDate>Sun, 02 Apr 2023 11:42:36 +0800</pubDate>
        
        <guid>https://www.frankinseattle.top/posts/powershell-history/</guid>
        <description>&lt;h2 id=&#34;get-history&#34;&gt;Get-History&lt;/h2&gt;
&lt;p&gt;PowerShell 的 &lt;code&gt;Get-History&lt;/code&gt; 命令只显示&lt;strong&gt;当前会话&lt;/strong&gt;的历史命令&lt;/p&gt;
&lt;p&gt;PowerShell 没有类似 Linux bash 下的 &lt;code&gt;history&lt;/code&gt; 一样, 直接查看所有会话的历史命令的 Cmdlet&lt;/p&gt;
&lt;p&gt;但是和 bash 一样, PowerShell 将所有会话的命令历史记录存储在文本文件中&lt;/p&gt;
&lt;p&gt;这个文件的路径可以通过命令 &lt;code&gt;(Get-PSReadlineOption).HistorySavePath&lt;/code&gt; 获取到&lt;/p&gt;
&lt;h2 id=&#34;get-psreadlineoption&#34;&gt;Get-PSReadlineOption&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;Get-PSReadlineOption&lt;/code&gt; 命令 包含在 &lt;code&gt;PSReadLine&lt;/code&gt; 模块下, 该模块需要 PowerShell 5.1 或更高的版本&lt;/p&gt;
&lt;p&gt;可以通过以下命令来实现查看所有命令历史记录&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-PowerShell&#34; data-lang=&#34;PowerShell&#34;&gt;Get-Content (Get-PSReadlineOption).HistorySavePath
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;需要注意的是, 如果历史命令中包含中文等非ASCII字符, 需要使用对应的编码读取该文本文件, 否则会显示乱码&lt;/p&gt;
&lt;p&gt;PowerShell 5.1 中 &lt;code&gt;Get-Content&lt;/code&gt; 命令的 &lt;code&gt;-Encoding&lt;/code&gt; 参数默认是 &lt;code&gt;Default&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Default 使用与系统的活动代码页相对应的编码 (通常为 ANSI)&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;而在 PowerShell 7.2 中, &lt;code&gt;Get-Content&lt;/code&gt; 命令的 &lt;code&gt;-Encoding&lt;/code&gt; 参数默认是 &lt;code&gt;utf8NoBOM&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;utf8NoBOM：以 UTF-8 格式编码，不带字节顺序标记 (BOM)&lt;/em&gt;&lt;/p&gt;
</description>
        </item>
        <item>
        <title>PowerShell Profile</title>
        <link>https://www.frankinseattle.top/posts/powershell-profile/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>https://www.frankinseattle.top/posts/powershell-profile/</guid>
        <description>&lt;h2 id=&#34;简短说明&#34;&gt;简短说明&lt;/h2&gt;
&lt;p&gt;介绍如何创建和使用 PowerShell 配置文件&lt;/p&gt;
&lt;h2 id=&#34;长说明&#34;&gt;长说明&lt;/h2&gt;
&lt;p&gt;PowerShell 配置文件是在 PowerShell 启动时运行的脚本。 可以使用配置文件作为启动脚本来自定义环境。 可以添加命令、别名、函数、变量、模块、PowerShell 驱动器等。 还可以将其他特定于会话的元素添加到配置文件中，使其在每个会话中可用，而无需导入或重新创建它们。
PowerShell 支持用户和主机程序的多个配置文件。 &lt;strong&gt;但是，它不会为你创建配置文件。&lt;/strong&gt;&lt;/p&gt;
&lt;h2 id=&#34;profile-变量&#34;&gt;&lt;code&gt;$PROFILE&lt;/code&gt; 变量&lt;/h2&gt;
&lt;p&gt;变量 &lt;code&gt;$PROFILE&lt;/code&gt; 存储 &lt;code&gt;当前用户，当前主机&lt;/code&gt; 配置文件 的路径。&lt;/p&gt;
&lt;p&gt;其他配置文件保存在 变量的注释属性中, 可通过以下命令查看对应类型配置文件的路径&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-PowerShell&#34; data-lang=&#34;PowerShell&#34;&gt;$PROFILE | Get-Member -Type NoteProperty
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;创建编辑配置文件&#34;&gt;创建、编辑配置文件&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-PowerShell&#34; data-lang=&#34;PowerShell&#34;&gt;notepad $PROFILE
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;如果配置文件首次设置后, 打开 PowerShell 时显示&lt;/p&gt;
&lt;p&gt;&lt;em&gt;无法加载文件 C:\Users\Ma\Documents\WindowsPowerShell\Microsoft.PowerShell_profile.ps1，因为在此系统上禁止运行脚本。&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;需要以管理员身份运行以下脚本, 修改执行策略以允许加载配置文件&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-PowerShell&#34; data-lang=&#34;PowerShell&#34;&gt;Set-ExecutionPolicy RemoteSigned
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;使用配置文件&#34;&gt;使用配置文件&lt;/h2&gt;
&lt;p&gt;在 PowerShell 中创建的许多项和运行的大多数命令仅影响当前会话。 结束会话时，将删除这些项。&lt;/p&gt;
&lt;p&gt;特定于会话的命令和项包括添加到会话的 PowerShell 变量、环境变量、别名、函数、命令和 PowerShell 模块。&lt;/p&gt;
&lt;p&gt;若要保存这些项并使其在所有将来的会话中可用，请将它们添加到 PowerShell 配置文件。&lt;/p&gt;
&lt;p&gt;配置文件的另一个常见用途是保存常用函数、别名和变量。 将项目保存在配置文件中时，可以在任何适用的会话中使用它们，而无需重新创建它们。&lt;/p&gt;
&lt;p&gt;导入第三方库 &lt;a class=&#34;link&#34; href=&#34;https://github.com/devblackops/Terminal-Icons&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;Terminal-Icons&lt;/a&gt; 美化终端&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-PowerShell&#34; data-lang=&#34;PowerShell&#34;&gt;Import-Module Terminal-Icons
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;保存常用函数, 如 将 &lt;code&gt;history&lt;/code&gt; 设置为查看所有历史命令, 而非仅仅当前会话的历史命令&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-PowerShell&#34; data-lang=&#34;PowerShell&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# 删除原有的别名 history&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# PowerShell 5.1版本需使用 Remove-Item 删除&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;# 更高版本的 PowerShell 可直接使用 Remove-Alias 命令&lt;/span&gt;
Remove-Item -Path &lt;span style=&#34;color:#66d9ef&#34;&gt;Alias&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;:&lt;/span&gt;history
&lt;span style=&#34;color:#66d9ef&#34;&gt;function&lt;/span&gt; history{
    Get-Content (Get-PSReadlineOption).HistorySavePath -Encoding utf8
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;https://learn.microsoft.com/zh-cn/powershell/module/microsoft.powershell.core/about/about_profiles?view=powershell-5.1&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;关于配置文件 - PowerShell | Microsoft Learn&lt;/a&gt;&lt;/p&gt;
</description>
        </item>
        <item>
        <title>Powershell Remove Duplicate Files</title>
        <link>https://www.frankinseattle.top/posts/powershell-remove-duplicate-files/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        
        <guid>https://www.frankinseattle.top/posts/powershell-remove-duplicate-files/</guid>
        <description>&lt;p&gt;PowerShell 脚本 删除重复文件(根据文件哈希值判重)&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-PowerShell&#34; data-lang=&#34;PowerShell&#34;&gt;$root_path = &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;D:\folder_name&amp;#34;&lt;/span&gt;
$log_file = &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;D:\log_file.txt&amp;#34;&lt;/span&gt;
ls $root_path -recurse | get-filehash | group -property hash | where { $_.count &lt;span style=&#34;color:#f92672&#34;&gt;-gt&lt;/span&gt; 1 } | % { $_.group } | epcsv $log_file
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
        </item>
        
    </channel>
</rss>
