<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>cheatsheet on Frank in seattle</title>
        <link>https://frank2016ma.github.io/seattle/tags/cheatsheet/</link>
        <description>Recent content in cheatsheet on Frank in seattle</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>en-us</language>
        <lastBuildDate>Sat, 10 Jun 2023 00:00:00 +0000</lastBuildDate><atom:link href="https://frank2016ma.github.io/seattle/tags/cheatsheet/index.xml" rel="self" type="application/rss+xml" /><item>
        <title>Sed 速查表</title>
        <link>https://frank2016ma.github.io/seattle/posts/linux/sed-cheat-sheet/</link>
        <pubDate>Sat, 10 Jun 2023 00:00:00 +0000</pubDate>
        
        <guid>https://frank2016ma.github.io/seattle/posts/linux/sed-cheat-sheet/</guid>
        <description>sed 语法 sed [options]... [script] [input-file]
sed 默认输入输出为 stdin, stdout
 sed treats multiple input files as one long stream. The following example prints the first line of the first file (one.txt) and the last line of the last file (three.txt). Use -s to reverse this behavior. 下面的命令中, sed 将 one two three 三个文件当作一个输入, 所以只会输出 one文件的第一行和 three 文件的最后一行
 sed -n &#39;1p ; $p&#39; one.txt two.txt three.txt
options -n --quiet</description>
        </item>
        <item>
        <title>apt 速查表</title>
        <link>https://frank2016ma.github.io/seattle/posts/linux/apt-cheat-sheet/</link>
        <pubDate>Thu, 01 Jun 2023 00:00:00 +0000</pubDate>
        
        <guid>https://frank2016ma.github.io/seattle/posts/linux/apt-cheat-sheet/</guid>
        <description>apt(Advanced Package Tool) apt 是 Debian 系的Linux发行版默认的软件包管理器, 本文暂不讨论apt 和 apt-get 的关系与区别
apt命令必须以具有sudo权限的用户运行, 以下示例省略前面的sudo
search apt search package_name
show apt show package_name 显示有关给定软件包的信息，包括其依赖项、安装、下载大小、软件包可用的来源、软件包内容的描述等
install apt install package1 package2 安装软件包, 多个软件包名使用空格分隔
update &amp;amp; upgrade apt update 从APT存储库中获取最新索引数据
apt upgrade 将已安装的软件包升级到最新版本
apt upgrade package_name 升级单个软件包
list apt list --installed 列出已安装的软件包
apt list --upgradeable 获取可升级软件包的列表
remove &amp;amp; purge remove 和 purge 的区别: remove 保留软件包的配置文件, 而 purge 会卸载软件包并删除配置文件
PS: 当我们安装了一个软件包, 发现某些设置和默认的设置不一致时, 需要注意是不是之前安装过这个软件, 然后使用remove删除, 重新安装之后使用了之前的配置文件导致的
apt remove package_name</description>
        </item>
        <item>
        <title>Grep 速查表</title>
        <link>https://frank2016ma.github.io/seattle/posts/linux/grep-cheat-sheet/</link>
        <pubDate>Thu, 27 Apr 2023 00:00:00 +0000</pubDate>
        
        <guid>https://frank2016ma.github.io/seattle/posts/linux/grep-cheat-sheet/</guid>
        <description>介绍 rep - print lines that match patterns
语法 grep searches for PATTERNS in each FILE. PATTERNS is one or more patterns separated by newline characters, and grep prints each line that matches a pattern. Typically PATTERNS should be quoted when grep is used in a shell command.
A FILE of “-” stands for standard input. If no FILE is given,recursive searches examine the working directory and nonrecursive searches read standard input.</description>
        </item>
        <item>
        <title>Find 速查表</title>
        <link>https://frank2016ma.github.io/seattle/posts/linux/find-cheat-sheet/</link>
        <pubDate>Tue, 25 Apr 2023 00:00:00 +0000</pubDate>
        
        <guid>https://frank2016ma.github.io/seattle/posts/linux/find-cheat-sheet/</guid>
        <description>Usage  search for files in a directory hierarchy
 1  find [path...] [options] [expression]   An expression is composed of a sequence of things:
 Tests Actions Global options Positional options Operators   1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17  # Wildcard find . -name &amp;#34;*.txt&amp;#34; find . -name &amp;#34;2020*.csv&amp;#34; find . -name &amp;#34;json_*&amp;#34; # regex # TODO # directory find .</description>
        </item>
        <item>
        <title>Tmux 速查表</title>
        <link>https://frank2016ma.github.io/seattle/posts/linux/tmux/</link>
        <pubDate>Tue, 25 Apr 2023 00:00:00 +0000</pubDate>
        
        <guid>https://frank2016ma.github.io/seattle/posts/linux/tmux/</guid>
        <description>1 2 3 4 5 6 7 8  # 新建会话 tmux new -s session_name # Attach to last session tmux a # Attach to a session with the name mysession tmux a -t mysession   常用快捷键 将当前会话与窗口分离
Ctrl+b d
列出当前所有会话(此快捷键需要在tmux会话内执行)
Ctrl+b s
划分左右两个窗格
Ctrl+b %
划分上下两个窗格
Ctrl+b &amp;quot;
关闭当前窗格
Ctrl+b x
调整窗格大小 Ctrl+b Ctrl+方向键
copy mode 进入窗口之后不支持上下翻页, 使用以下快捷键进入 copy mode
Ctrl+b [
按 q 退出
参考 Tmux Cheat Sheet &amp;amp; Quick Reference</description>
        </item>
        <item>
        <title>tldr - 更加简洁的帮助文档</title>
        <link>https://frank2016ma.github.io/seattle/posts/linux/tldr-cheat-sheet/</link>
        <pubDate>Mon, 10 Apr 2023 00:00:00 +0000</pubDate>
        
        <guid>https://frank2016ma.github.io/seattle/posts/linux/tldr-cheat-sheet/</guid>
        <description>简介 tldr(Too Long; Didn&amp;rsquo;t Read) 是一个开源的命令行工具，提供简洁的命令行使用文档
tldr 提供了 web端 tldr InBrowser.App, nodejs 和 python 客户端以及 PDF版本
安装 1 2 3 4 5 6  # nodejs npm install tldr # python pip3 install tldr   使用 tldr sed sed Edit text in a scriptable manner. See also: `awk`, `ed`. More information: https://www.gnu.org/software/sed/manual/sed.html. - Replace all `apple` (basic regex) occurrences with `mango` (basic regex) in all input lines and print the result to `stdout`: command | sed &#39;s/apple/mango/g&#39; - Execute a specific script [f]ile and print the result to `stdout`: command | sed -f path/to/script.</description>
        </item>
        <item>
        <title>VScode 快捷键</title>
        <link>https://frank2016ma.github.io/seattle/posts/others/vscode-keys/</link>
        <pubDate>Sun, 02 Apr 2023 00:00:00 +0000</pubDate>
        
        <guid>https://frank2016ma.github.io/seattle/posts/others/vscode-keys/</guid>
        <description>多光标操作     ====     Ctrl+I 选中当前行   Shift+Alt+I 将光标插入所选每行的末尾   Ctrl+Shift+L 选择所有与所选中内容相同的内容   Ctrl+F2 选择所有与所选中词汇相同的内容    编辑器控制     ====     Ctrl+\ 拆分编辑器为多组   Ctrl+ 1 / 2 / 3 切换窗口焦点至某一组    文件管理     ====     Ctrl+K P 复制当前文件路径   Ctrl+K R 打开当前文件所在文件夹    显示     ====     Shift+Alt+0 切换编辑器布局(水平/垂直)   Ctrl+Shift+F 显示搜索界面   Ctrl+Shift+X 显示插件管理界面   Ctrl+K V 预览 Markdown 文件（侧边）   Ctrl+K Z 禅模式（连按两次 Esc 退出）    语言操作     ====     Ctrl+K Ctrl+X 移除行尾空白字符    基础编辑     ====     Ctrl+Shift+K 删除行   Ctrl+Enter 在当前行下方插入新行   Ctrl+Shift+Enter 在当前行上方插入新行   Shift+Alt+A 切换块注释   Alt+Z 切换自动换行   Ctrl+K Ctrl+[ 折叠当前所有子代码块   Ctrl+K Ctrl+] 展开当前所有子代码块     写文章时经常遇到一些英文名词以及缩写, 需要频繁切换输入法中英文以及大小写, 非常不方便, vscode 自带的命令转换选中内容的功能</description>
        </item>
        
    </channel>
</rss>
