<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>javascript on Frank in seattle</title>
        <link>https://frank2016ma.github.io/seattle/categories/javascript/</link>
        <description>Recent content in javascript on Frank in seattle</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>en-us</language>
        <lastBuildDate>Mon, 26 Jun 2023 00:00:00 +0000</lastBuildDate><atom:link href="https://frank2016ma.github.io/seattle/categories/javascript/index.xml" rel="self" type="application/rss+xml" /><item>
        <title>WebSocket</title>
        <link>https://frank2016ma.github.io/seattle/posts/js/websocket/</link>
        <pubDate>Mon, 26 Jun 2023 00:00:00 +0000</pubDate>
        
        <guid>https://frank2016ma.github.io/seattle/posts/js/websocket/</guid>
        <description>Introducing websocket 的最大特点就是, 服务器可以主动向客户端推送消息, 客户端也可以主动向服务器发送消息
 While a WebSocket connection is functionally somewhat similar to standard Unix-style sockets, they are not related.
 尽管 WebSocket 连接 在功能上和 标准的 Unix 风格的socket 类似, 但是这两者之间并没有关联
为什么需要websocket HTTP 协议有一个缺陷, 通信只能有客户端发起
js客户端websocket 构造函数创建websocket实例 1  const exampleSocket = new WebSocket(&amp;#34;wss://www.example.com/socketserver&amp;#34;);   websocket.readyState  0: CONNECTING 1: OPEN 2: CLOSING 3: CLOSED  指定回调函数 oncode, onmessage, readState 等是 属性()
send(), close() 是方法
onopen 1 2 3  ws.</description>
        </item>
        <item>
        <title>Spread Syntax</title>
        <link>https://frank2016ma.github.io/seattle/posts/js/spread-syntax/</link>
        <pubDate>Thu, 08 Jun 2023 00:00:00 +0000</pubDate>
        
        <guid>https://frank2016ma.github.io/seattle/posts/js/spread-syntax/</guid>
        <description>展开语法(Spread syntax) 在函数调用/数组构造时, 将数组表达式或者string在语法层面展开; 还可以在构造字面量时, 将对象按照 key-value 的方式展开
语法 myFunction(&amp;hellip;iterableObj);
实例 在函数调用时使用展开语法 等价于apply 1 2 3 4 5 6  function myFunction(x, y, z) {}; var args = [0, 1, 2] myfunction.apply(null, args); // 使用展开语法 myfunction(...args)   构造字面量数组 1 2 3 4 5 6 7 8  var parts = [&amp;#39;apple&amp;#39;, &amp;#39;banana&amp;#39;] var fruits = [&amp;#39;pear&amp;#39;, ...parts, &amp;#39;watermelon&amp;#39;] var arr = [1, 2, 3] var arr2 = [...arr] // like arr.</description>
        </item>
        <item>
        <title>js function</title>
        <link>https://frank2016ma.github.io/seattle/posts/js/js-function/</link>
        <pubDate>Tue, 06 Jun 2023 00:00:00 +0000</pubDate>
        
        <guid>https://frank2016ma.github.io/seattle/posts/js/js-function/</guid>
        <description>js 有三种声明函数的方法 函数声明(Function Declaration) 1 2 3  function MyFunction(arg1[, arg2, ...]){ // }   函数表达式(Function Expression) 将一个匿名函数赋值给变量, 这个匿名函数又称函数表达式
1 2 3  var f1 = function [MyFunction](arg1[, arg2, ...]){ // };   采用函数表达式声明函数时，function命令后面不带有函数名。 如果加上函数名，该函数名只在函数体内部有效，在函数体外部无效。 下面的 x 指代函数表达式本身
1 2 3 4 5 6 7 8 9  var print = function x(){ // 内部  console.log(typeof x); }; // 外部 x // ReferenceError: x is not defined print() // function   函数表达式中加入函数名的好处:</description>
        </item>
        <item>
        <title>Promise</title>
        <link>https://frank2016ma.github.io/seattle/posts/js/promise/</link>
        <pubDate>Tue, 06 Jun 2023 00:00:00 +0000</pubDate>
        
        <guid>https://frank2016ma.github.io/seattle/posts/js/promise/</guid>
        <description>回调函数是异步操作最基本的方法
1 2 3 4 5 6 7 8 9 10 11  function f1(callback) { // ...  callback(); } function f2() { // ... } f1(f2); // 把 f2 写成 f1 的回调函数   sedTimeout(func|code, delay) 一段时间之后执行某个函数或某段代码
setInterval(func|code, delay) 每隔一段时间就执行一次
Promise含义 Promise 是异步编程的一种解决方案，比传统的解决方案——回调函数和事件——更合理和更强大。它由社区最早提出和实现，ES6 将其写进了语言标准，统一了用法，原生提供了Promise对象。
所谓Promise，简单说就是一个容器，里面保存着某个未来才会结束的事件（通常是一个异步操作）的结果。从语法上说，Promise 是一个对象，从它可以获取异步操作的消息。Promise 提供统一的 API，各种异步操作都可以用同样的方法进行处理。
Promise对象有以下两个特点。
（1）对象的状态不受外界影响。Promise对象代表一个异步操作，有三种状态：pending（进行中）、fulfilled（已成功）和rejected（已失败）。只有异步操作的结果，可以决定当前是哪一种状态，任何其他操作都无法改变这个状态。这也是Promise这个名字的由来，它的英语意思就是“承诺”，表示其他手段无法改变。
（2）一旦状态改变，就不会再变，任何时候都可以得到这个结果。Promise对象的状态改变，只有两种可能：从pending变为fulfilled和从pending变为rejected。只要这两种情况发生，状态就凝固了，不会再变了，会一直保持这个结果，这时就称为 resolved（已定型）。如果改变已经发生了，你再对Promise对象添加回调函数，也会立即得到这个结果。这与事件（Event）完全不同，事件的特点是，如果你错过了它，再去监听，是得不到结果的。
语法 1 2 3 4 5 6 7 8 9  const promise = new Promise(function(resolve, reject) { // .</description>
        </item>
        <item>
        <title>Hugo Copy Code</title>
        <link>https://frank2016ma.github.io/seattle/posts/hugo/hugo-copy-code/</link>
        <pubDate>Fri, 02 Jun 2023 00:00:00 +0000</pubDate>
        
        <guid>https://frank2016ma.github.io/seattle/posts/hugo/hugo-copy-code/</guid>
        <description>使用hugo建站, 点击代码块中右上角的 Copy按钮时, 发现没有生效
仔细对比了一下stack主题的config文件以及content文件夹下的markdown源码, 复制代码并不需要额外特殊设置, 于是打开控制台, 发现确实有代码报错, 报错信息如下
Markdown Syntax Guide
Uncaught TypeError: Cannot read properties of undefined (reading &#39;writeText&#39;) at HTMLButtonElement.&amp;lt;anonymous&amp;gt; (main.js:4:429) (匿名) @ main.js:4 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26  let r = document.querySelectorAll(&amp;#34;.article-content div.highlight&amp;#34;) , i = &amp;#34;Copy&amp;#34; , n = &amp;#34;Copied!&amp;#34;; r.forEach(o=&amp;gt;{ let s = document.</description>
        </item>
        <item>
        <title>Bookmarklet</title>
        <link>https://frank2016ma.github.io/seattle/posts/js/bookmarklet/</link>
        <pubDate>Mon, 27 Mar 2023 00:00:00 +0000</pubDate>
        
        <guid>https://frank2016ma.github.io/seattle/posts/js/bookmarklet/</guid>
        <description>Bookmarklet 是什么 A bookmarklet is a bookmark stored in a web browser that contains JavaScript commands that add new features to the browser. They are stored as the URL of a bookmark in a web browser or as a hyperlink on a web page. Bookmarklets are usually small snippets of JavaScript executed when user clicks on them. When clicked, bookmarklets can perform a wide variety of operations, such as running a search query from selected text or extracting data from a table.</description>
        </item>
        
    </channel>
</rss>
