<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>React on Frank in seattle</title>
        <link>https://frank2016ma.github.io/seattle/categories/react/</link>
        <description>Recent content in React on Frank in seattle</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>en-us</language>
        <lastBuildDate>Sun, 25 Jun 2023 00:00:00 +0000</lastBuildDate><atom:link href="https://frank2016ma.github.io/seattle/categories/react/index.xml" rel="self" type="application/rss+xml" /><item>
        <title>Tic Tac Toe</title>
        <link>https://frank2016ma.github.io/seattle/posts/js/react/tic-tac-toe/</link>
        <pubDate>Mon, 05 Jun 2023 00:00:00 +0000</pubDate>
        
        <guid>https://frank2016ma.github.io/seattle/posts/js/react/tic-tac-toe/</guid>
        <description>1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133  import { useState } from &amp;#39;react&amp;#39;; /* React provides a special function called useState that you can call from your component to let it “remember” things.</description>
        </item>
        <item>
        <title>React Hook</title>
        <link>https://frank2016ma.github.io/seattle/posts/js/react/react-hook/</link>
        <pubDate>Sun, 25 Jun 2023 00:00:00 +0000</pubDate>
        
        <guid>https://frank2016ma.github.io/seattle/posts/js/react/react-hook/</guid>
        <description>React 的核心是组件, v16.8之前, 组件的标准写法是组件类
组件的另一种写法是函数组件:
1 2 3  function Welcome(props) { return &amp;lt;h1&amp;gt;Hello, {props.name}&amp;lt;/h1&amp;gt;; }   函数组件有一些限制: 必须是纯函数, 不能包含状态, 也不支持生命周期方法, 因此无法取代组件类
React Hooks 的设计目的，就是加强版函数组件，完全不使用&amp;quot;类&amp;quot;，就能写出一个全功能的组件。
React Hooks 的意思是，组件尽量写成纯函数，如果需要外部功能和副作用，就用钩子把外部代码&amp;quot;钩&amp;quot;进来。
常用的钩子:
 useState()  useState()这个函数接受状态的初始值，作为参数，返回一个数组，数组的第一个成员是一个变量, 指向状态的当前值。第二个成员是一个函数，用来更新状态，约定是set前缀加上状态的变量名
 useEffect()  1 2 3  useEffect(() =&amp;gt; { // Async Action }, [dependencies])   useEffect()用来引入具有副作用的操作，最常见的就是向服务器请求数据 useEffect()接受两个参数。第一个参数是一个函数，异步操作的代码放在里面。第二个参数是一个数组，用于给出 Effect 的依赖项，只要这个数组发生变化，useEffect()就会执行。
  useContext()
  useReducer()
  useRef
  useRef 变化不会主动使页面渲染</description>
        </item>
        <item>
        <title>Axios</title>
        <link>https://frank2016ma.github.io/seattle/posts/js/axios-cheat-sheet/</link>
        <pubDate>Mon, 05 Jun 2023 00:00:00 +0000</pubDate>
        
        <guid>https://frank2016ma.github.io/seattle/posts/js/axios-cheat-sheet/</guid>
        <description>axios install  npm install axios &amp;lt;script src=&amp;quot;https://cdn.jsdelivr.net/npm/axios/dist/axios.min.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt; &amp;lt;script src=&amp;quot;https://unpkg.com/axios/dist/axios.min.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;  example 1 2 3 4 5 6 7 8 9 10 11 12  axios.get(&amp;#39;/user?ID=12345&amp;#39;) .then(function (response) { // handle success  console.log(response); }) .catch(function (error) { // handle error  console.log(error); }) .finally(function () { // always executed  });   </description>
        </item>
        
    </channel>
</rss>
